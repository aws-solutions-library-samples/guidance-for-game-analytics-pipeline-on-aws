openapi: 3.0.0
info:
    title: Game Analytics Pipeline API
schemes: ["https"]
x-amazon-apigateway-api-key-source: "AUTHORIZER"
x-amazon-apigateway-request-validators:
    all:
        validateRequestBody: true
        validateRequestParameters: true
x-amazon-apigateway-gateway-responses:
    BAD_REQUEST_BODY:
        responseTemplates:
            application/json: |-
                {
                "error": "BadRequest",
                "error_detail": "$context.error.validationErrorString"
                }
        responseParameters:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
    DEFAULT_4XX:
        statusCode: 400
        responseParameters:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        responseTemplates:
            application/json: |-
                {
                "error": "BadRequest",
                "error_detail": "$context.error.validationErrorString"
                }
    DEFAULT_5XX:
        statusCode: 500
        responseParameters:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        responseTemplates:
            application/json: |-
                {
                "error": "InternalFailure",
                "error_detail": "$context.error.message"
                }
    ACCESS_DENIED:
        statusCode: 403
        responseParameters:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        responseTemplates:
            application/json: |-
                {
                "error": "AccessDenied"
                }
    UNAUTHORIZED:
        statusCode: 403
        responseParameters:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        responseTemplates:
            application/json: |-
                {
                "error": "AccessDenied"
                }
    MISSING_AUTHENTICATION_TOKEN:
        statusCode: 403
        responseParameters:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        responseTemplates:
            application/json: |-
                {
                "error": "AccessDenied"
                }
    INTEGRATION_FAILURE:
        statusCode: 500
        responseParameters:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        responseTemplates:
            application/json: |-
                {
                "error": "InternalFailure",
                "error_detail": "An error occurred on the server side."
                }
paths:
    "/applications":
        options:
            consumes:
                - "application/json"
            produces:
                - "application/json"
            responses:
                "200":
                    description: "200 response"
                    schema:
                        $ref: "#/definitions/Empty"
                    headers:
                        Access-Control-Allow-Origin:
                            type: "string"
                        Access-Control-Allow-Methods:
                            type: "string"
                        Access-Control-Allow-Headers:
                            type: "string"
            security:
                - sigv4: []
            x-amazon-apigateway-integration:
                responses:
                    default:
                        statusCode: "200"
                        responseParameters:
                            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                            method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                    application/json: '{"statusCode": 200}'
                type: "mock"
        x-amazon-apigateway-any-method:
            produces:
                - "application/json"
            responses:
                "200":
                    description: "200 response"
                    schema:
                        $ref: "#/definitions/Empty"
            security:
                - sigv4: []
            x-amazon-apigateway-integration:
                uri: ${application_admin_service_function}
                responses:
                    default:
                        statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                credentials: ${api_gateway_role}
    "/applications/{applicationId}":
        options:
            consumes:
                - "application/json"
            produces:
                - "application/json"
            responses:
                "200":
                    description: "200 response"
                    schema:
                        $ref: "#/definitions/Empty"
                    headers:
                        Access-Control-Allow-Origin:
                            type: "string"
                        Access-Control-Allow-Methods:
                            type: "string"
                        Access-Control-Allow-Headers:
                            type: "string"
            security:
                - sigv4: []
            x-amazon-apigateway-integration:
                responses:
                    default:
                        statusCode: "200"
                        responseParameters:
                            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                            method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                    application/json: '{"statusCode": 200}'
                type: "mock"
        x-amazon-apigateway-any-method:
            produces:
                - "application/json"
            parameters:
                - name: "applicationId"
                  in: "path"
                  required: true
                  type: "string"
            responses:
                "200":
                    description: "200 response"
                    schema:
                        $ref: "#/definitions/Empty"
            security:
                - sigv4: []
            x-amazon-apigateway-integration:
                uri: ${application_admin_service_function}
                responses:
                    default:
                        statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                credentials: ${api_gateway_role}
    "/applications/{applicationId}/authorizations":
        options:
            consumes:
                - "application/json"
            produces:
                - "application/json"
            responses:
                "200":
                    description: "200 response"
                    schema:
                        $ref: "#/definitions/Empty"
                    headers:
                        Access-Control-Allow-Origin:
                            type: "string"
                        Access-Control-Allow-Methods:
                            type: "string"
                        Access-Control-Allow-Headers:
                            type: "string"
            security:
                - sigv4: []
            x-amazon-apigateway-integration:
                responses:
                    default:
                        statusCode: "200"
                        responseParameters:
                            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                            method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                    application/json: '{"statusCode": 200}'
                type: "mock"
        x-amazon-apigateway-any-method:
            produces:
                - "application/json"
            responses:
                "200":
                    description: "200 response"
                    schema:
                        $ref: "#/definitions/Empty"
            security:
                - sigv4: []
            x-amazon-apigateway-integration:
                uri: ${application_admin_service_function}
                responses:
                    default:
                        statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                credentials: ${api_gateway_role}
    "/applications/{applicationId}/authorizations/{apiKeyId}":
        options:
            consumes:
                - "application/json"
            produces:
                - "application/json"
            responses:
                "200":
                    description: "200 response"
                    schema:
                        $ref: "#/definitions/Empty"
                    headers:
                        Access-Control-Allow-Origin:
                            type: "string"
                        Access-Control-Allow-Methods:
                            type: "string"
                        Access-Control-Allow-Headers:
                            type: "string"
            security:
                - sigv4: []
            x-amazon-apigateway-integration:
                responses:
                    default:
                        statusCode: "200"
                        responseParameters:
                            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                            method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                    application/json: '{"statusCode": 200}'
                type: "mock"
        x-amazon-apigateway-any-method:
            produces:
                - "application/json"
            responses:
                "200":
                    description: "200 response"
                    schema:
                        $ref: "#/definitions/Empty"
            security:
                - sigv4: []
            x-amazon-apigateway-integration:
                uri: ${application_admin_service_function}
                responses:
                    default:
                        statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                credentials: ${api_gateway_role}
    "/redshift/setup":
        options:
            consumes:
                - "application/json"
            produces:
                - "application/json"
            responses:
                "200":
                    description: "200 response"
                    schema:
                        $ref: "#/definitions/Empty"
                    headers:
                        Access-Control-Allow-Origin:
                            type: "string"
                        Access-Control-Allow-Methods:
                            type: "string"
                        Access-Control-Allow-Headers:
                            type: "string"
            security:
                - sigv4: []
            x-amazon-apigateway-integration:
                responses:
                    default:
                        statusCode: "200"
                        responseParameters:
                            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                            method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                    application/json: '{"statusCode": 200}'
                type: "mock"
        x-amazon-apigateway-any-method:
            produces:
                - "application/json"
            responses:
                "200":
                    description: "200 response"
                    schema:
                        $ref: "#/definitions/Empty"
            security:
                - sigv4: []
            x-amazon-apigateway-integration:
                uri: ${application_admin_service_function}
                responses:
                    default:
                        statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                credentials: ${api_gateway_role}
                        
    "/applications/{applicationId}/events":
        post:
            operationId: SendEvents
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GameEventsBatchSchema"
                required: true
            x-amazon-apigateway-request-validator: all
            responses:
                "200":
                    description: Successful POST /events
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GameEventSuccessResponse"
                "400":
                    description: Bad Request Exception
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorException"
                "401":
                    description: Unauthorized Exception
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorException"
                "500":
                    description: Internal Server Error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorException"
            security:
                - lambda_authorizer: []
            x-amazon-apigateway-integration:
                uri: ${kinesis_putrecords_url}
                credentials: ${api_gateway_role}
                passthroughBehavior: "never"
                httpMethod: "POST"
                type: "aws"
                requestParameters:
                    integration.request.header.Content-Type: "'x-amz-json-1.1'"
                requestTemplates:
                    application/json: |-
                        ${ingest_application_json}
                responses:
                    default:
                        statusCode: "200"
                        responseTemplates:
                            application/json: >
                                ${ingest_response_200}
                    "4\\d{2}":
                        statusCode: "400"
                        responseTemplates:
                            application/json: >
                                ${ingest_response_400}
                    "5\\d{2}":
                        statusCode: "500"
                        responseTemplates:
                            application/json: >
                                ${ingest_response_400}
components:
    schemas:
        ErrorException:
            type: object
            properties:
                error:
                    type: string
                    description: Error code from the API
                error_detail:
                    type: string
                    description: Error message
        GameEventSuccessResponse:
            type: object
            title: Game Event Success Response Schema
            properties:
                Total:
                    type: number
                    description: Total number of events that were processed in the request
                FailedRecordCount:
                    type: number
                    description: Number of events that failed to be saved to game events stream
                Events:
                    type: array
                    items:
                        $ref: "#/components/schemas/GameEventSuccessResponseRecord"
        GameEventSuccessResponseRecord:
            type: object
            properties:
                Result:
                    type: string
                    description: Processing result for the input record
                ErrorCode:
                    type: string
                    description: The error code from the game events stream. Value set if Result is Error.
        GameEventsBatchSchema:
            type: object
            title: Game Analytics Batched Events Schema
            required:
                - events
            properties:
                events:
                    type: array
                    items:
                        $ref: "#/components/schemas/GameEventSchema"
        GameEventSchema:
            type: object
            title: Game Analytics API Event Schema
            additionalProperties: false
            description: "Game Event sent to the Solution API"
            required:
                - event_id
                - event_type
                - event_name
                - event_timestamp
            properties:
                event_id:
                    type: string
                    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
                    description: A random UUID that uniquely identifies an event.
                event_type:
                    type: string
                    pattern: "^[A-Za-z0-9-_.]+$"
                    description: Identifies the type of event
                event_name:
                    type: string
                    pattern: "^[A-Za-z0-9-_.]+$"
                    description: Name of the event that occurred
                event_version:
                    type: string
                    pattern: "^[A-Za-z0-9-_.]+$"
                    description: An API version for this event format.
                app_version:
                    type: string
                    pattern: "^[A-Za-z0-9-_.]+$"
                    description: Version identifier for the application that generated the event
                event_timestamp:
                    type: number
                    description: The time in seconds since the Unix epoch at which this event occurred (set by producer of event).
                event_data:
                    type: object
    securitySchemes:
        lambda_authorizer:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "custom"
            x-amazon-apigateway-authorizer:
                authorizerUri: ${lambda_authorizer}
                authorizerCredentials: ${authorizer_credentials}
                authorizerResultTtlInSeconds: 300
                identitySource: "method.request.header.Authorization"
                type: "request"
        sigv4:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "awsSigv4"